{"version":3,"sources":["webpack:///./src/components/searchForm.js","webpack:///./src/components/searchResults.js","webpack:///./src/pages/search.js"],"names":["SearchForm","query","role","method","htmlFor","type","id","name","aria-control","onChange","e","navigate","encodeURIComponent","target","value","SearchResults","results","aria-label","length","className","aria-live","map","title","user","largeImageURL","key","href","Search","data","location","useState","setResults","searchQuery","URLSearchParams","search","get","useEffect","window","__LUNR__","__loaded","then","lunr","images","en","index","ref","store"],"mappings":"6JAmBeA,EAhBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OAEf,0BAAMC,KAAK,SAASC,OAAO,OACvB,2BAAOC,QAAQ,gBAAe,4CAC9B,2BACIC,KAAK,SACLC,GAAG,eACHC,KAAK,WACLC,eAAa,uBACbC,SAAU,SAACC,GAAD,OAAOC,mBAAS,oBAAoBC,mBAAmBF,EAAEG,OAAOC,SAC1EA,MAAOb,IAEX,4BAAQI,KAAK,UAAb,YCkBOU,EA/BO,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAOe,EAAV,EAAUA,QAAV,OAClB,6BAASC,aAAW,kCACbD,EAAQE,QAAUjB,GAEjB,wBAAIkB,UAAU,uBACVC,YAAU,aADd,SAEQJ,EAAQE,OAFhB,cAEmCjB,EAFnC,OAIDe,EAAQE,QACP,wBAAIC,UAAU,uBACTH,EAAQK,KAAI,gBACTC,EADS,EACTA,MACAC,EAFS,EAETA,KACAC,EAHS,EAGTA,cAHS,OAML,yBAAKC,IAAKH,GACN,wBAAIH,UAAU,gCACV,2BAAIG,GACJ,2BAAIC,GACJ,uBAAGG,KAAMF,GAAT,0BCcjBG,UA9BA,SAAC,GAIV,EAHFC,KAGG,IAFHC,EAEE,EAFFA,SAEE,EAC4BC,mBAAS,IAAhCd,EADL,KACce,EADd,KAEIC,EAAc,IAAIC,gBAAgBJ,EAASK,QAAQC,IAAI,aAAe,GAW5E,OAVAC,qBAAU,WACFC,OAAOC,UACPD,OAAOC,SAASC,SAASC,MAAK,SAAAC,GAE1B,IACMC,EADOD,EAAKE,GAAGC,MAAMV,OAAOF,GACdX,KAAI,gBAAGwB,EAAH,EAAGA,IAAH,OAAaJ,EAAKE,GAAGG,MAAMD,MACnDd,EAAWW,QAGpB,CAACb,EAASK,SAET,kBAAC,IAAD,CACIL,SAAUA,GAEV,kBAAC,EAAD,CAAY5B,MAAO+B,IACnB,kBAAC,EAAD,CACI/B,MAAO+B,EACPhB,QAASA","file":"component---src-pages-search-js-5a6e8389ebed20691a85.js","sourcesContent":["import React from 'react';\nimport { navigate } from 'gatsby';\n\nconst SearchForm = ({query}) => (\n    // Using GET menas that we can ustilise deeplinking functionallity\n    <form role=\"search\" method=\"GET\">\n        <label htmlFor=\"search-input\"><h1>Search tags</h1></label>\n        <input\n            type=\"search\"\n            id=\"search-input\"\n            name=\"keywords\"\n            aria-control=\"search-results-count\"\n            onChange={(e) => navigate(`/search?keywords=${encodeURIComponent(e.target.value)}`)}\n            value={query}\n        />\n        <button type=\"submit\">Submit</button>\n    </form>\n);\n\nexport default SearchForm;","import React from 'react';\n\nconst SearchResults = ({ query, results }) => (\n    <section aria-label=\"Search results for all posts\">\n        {!!results.length && query &&\n\n            <h2 className=\"search-results-count\"\n                aria-live=\"assertive\" // This will tell assertive technologies that this field will update on the fly and this can be set to pollite or assertive\n            >Found {results.length} posts on \"{query}\"</h2>\n        }\n        {!!results.length &&\n            <ol className=\"search-results-list\">\n                {results.map(({\n                    title,\n                    user,\n                    largeImageURL\n                }\n                ) => (\n                        <div key={title}>\n                            <h3 className=\"search-results-list__heading\">\n                                <a>{title}</a>\n                                <a>{user}</a>\n                                <a href={largeImageURL}> Click to see!</a>\n                            </h3>\n                        </div>\n                    ))}\n\n            </ol>\n        }\n\n    </section>\n);\n\nexport default SearchResults;","import React, { useState, useEffect } from 'react';\nimport Layout from '../components/layout';\nimport SearchForm from '../components/searchForm';\nimport SearchResults from '../components/searchResults';\n\n\nconst Search = ({\n    data,\n    location\n\n}) => {\n    const [results, setResults] = useState([]);\n    const searchQuery = new URLSearchParams(location.search).get('keywords') || '';\n    useEffect(() => {\n        if (window.__LUNR__) {\n            window.__LUNR__.__loaded.then(lunr => {\n                // lunr is loaded here\n                const refs = lunr.en.index.search(searchQuery);\n                const images = refs.map(({ ref }) => lunr.en.store[ref]);\n                setResults(images)\n            });\n        }\n    }, [location.search]); // An empty array tells the component to only render once and not again\n    return (\n        <Layout\n            location={location}\n        >\n            <SearchForm query={searchQuery} />\n            <SearchResults\n                query={searchQuery}\n                results={results}\n            />\n        </Layout>\n    );\n};\n\nexport default Search;"],"sourceRoot":""}